import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function seedPensionInfo() {
  console.log('üè® Seeding pension information...')

  // First get the existing record
  const { data: existing } = await supabase
    .from('pension_info')
    .select('id')
    .single()

  // Update pension_info table with the correct column names
  const { error: pensionError } = await supabase
    .from('pension_info')
    .update({
      name: 'Pension Jesuitsk√°',
      address: 'Jesuitsk√° 5/183, 669 02 Znojmo',
      phone: '+420 603 830 130',
      phone2: '+420 515 224 496',
      phone_secondary: '+420 515 224 496',
      email: 'info@jesuitska.cz',
      website: 'http://www.jesuitska.cz',
      manager_name: 'Jana Sab√°ƒçkov√°',
      owner_name: 'Jana Sab√°ƒçkov√°',
      ic: '44969732',
      company_id: '44969732',
      description: 'V√Ωjimeƒçnƒõ hodnocen√© ubytovac√≠ za≈ô√≠zen√≠ v historick√©m centru Znojma s celkov√Ωm hodnocen√≠m 8,8/10. Pension byl otev≈ôen v roce 1994 po d≈Økladn√© rekonstrukci historick√© budovy ve st≈ôedovƒõk√©m centru Znojma.',
      check_in_time: '13:00 - 19:00',
      check_out_time: '08:00 - 11:00',
      breakfast_price: 8,
      rating: 8.8,
      location_rating: 9.7,
      opened_year: 1994,
      languages: ['ƒåe≈°tina', 'Nƒõmƒçina', 'Angliƒçtina', 'Sloven≈°tina'],
      languages_spoken: ['ƒåe≈°tina', 'Nƒõmƒçina', 'Angliƒçtina', 'Sloven≈°tina'],
      payment_methods: ['Hotovost'],
      policies: [
        'Neku≈ô√°ck√Ω penzion',
        'P√°rty/akce nejsou povoleny',
        'Dom√°c√≠ mazl√≠ƒçci na vy≈æ√°d√°n√≠',
        'Dƒõti v≈°ech vƒõk≈Ø jsou v√≠t√°ny',
        'Dƒõtsk√° post√Ωlka za 10‚Ç¨/noc (0-3 roky)'
      ],
      amenities: [
        'Bezplatn√© parkov√°n√≠',
        'Bezplatn√© Wi-Fi',
        'Rodinn√© pokoje',
        'Neku≈ô√°ck√© pokoje',
        'K√°vovar/ƒçajn√≠k na v≈°ech pokoj√≠ch',
        'Sn√≠danƒõ formou bufetu',
        'Terasa s v√Ωhledem na vnit≈ôn√≠ n√°dvo≈ô√≠',
        'Vlastn√≠ mal√° vinot√©ka',
        'P≈Øjƒçen√≠ a √∫schova kol',
        'Dom√°c√≠ mazl√≠ƒçci povoleni na vy≈æ√°d√°n√≠'
      ]
    })
    .eq('id', existing?.id || '2031be20-76a8-43c1-93d1-5470f6cc5735')

  if (pensionError) {
    console.error('‚ùå Error updating pension info:', pensionError)
    return
  }

  console.log('‚úÖ Pension info updated')

  // Seed room types
  const roomTypes = [
    {
      name: 'Dvoul≈Ø≈ækov√Ω pokoj',
      description: 'Komfortn√≠ dvoul≈Ø≈ækov√Ω pokoj s man≈æelskou postel√≠',
      base_price: 1800,
      max_occupancy: 2,
      amenities: [
        'Vlastn√≠ koupelna',
        'TV s plochou obrazovkou',
        'Bezplatn√© Wi-Fi',
        'K√°vovar/ƒçajn√≠k',
        'F√©n',
        'Bezplatn√© toaletn√≠ pot≈ôeby'
      ]
    },
    {
      name: 'Dvoul≈Ø≈ækov√Ω pokoj se dvƒõma l≈Ø≈æky',
      description: 'Prostorn√Ω pokoj se dvƒõma oddƒõlen√Ωmi l≈Ø≈æky',
      base_price: 1800,
      max_occupancy: 2,
      amenities: [
        'Vlastn√≠ koupelna',
        'TV s plochou obrazovkou',
        'Bezplatn√© Wi-Fi',
        'K√°vovar/ƒçajn√≠k',
        'F√©n',
        'Bezplatn√© toaletn√≠ pot≈ôeby'
      ]
    },
    {
      name: 'Standardn√≠ dvoul≈Ø≈ækov√Ω pokoj',
      description: 'Standardn√≠ pokoj s man≈æelskou postel√≠ a v≈°emi pot≈ôebn√Ωmi vymo≈æenostmi',
      base_price: 2000,
      max_occupancy: 2,
      amenities: [
        'Vlastn√≠ koupelna',
        'TV s plochou obrazovkou',
        'Bezplatn√© Wi-Fi',
        'K√°vovar/ƒçajn√≠k',
        'Lednice',
        'F√©n',
        'Bezplatn√© toaletn√≠ pot≈ôeby',
        'Posezen√≠'
      ]
    },
    {
      name: 'Deluxe Suite',
      description: 'Luxusn√≠ apartm√° s oddƒõlenou lo≈ænic√≠ a ob√Ωvac√≠m pokojem',
      base_price: 3500,
      max_occupancy: 4,
      amenities: [
        'Lo≈ænice s man≈æelskou postel√≠',
        'Ob√Ωvac√≠ pokoj s rozkl√°dac√≠ pohovkou',
        'Futon',
        'Vlastn√≠ koupelna',
        'TV s plochou obrazovkou',
        'Bezplatn√© Wi-Fi',
        'K√°vovar/ƒçajn√≠k',
        'Lednice',
        'F√©n',
        'Bezplatn√© toaletn√≠ pot≈ôeby',
        'Posezen√≠',
        'Pohovka'
      ]
    }
  ]

  for (const roomType of roomTypes) {
    const { error: rtError } = await supabase
      .from('room_types')
      .upsert(roomType, { onConflict: 'name' })
    
    if (rtError) {
      console.error(`‚ùå Error creating room type ${roomType.name}:`, rtError)
    } else {
      console.log(`‚úÖ Room type ${roomType.name} created`)
    }
  }

  // Seed rooms
  const rooms = [
    // Dvoul≈Ø≈ækov√© pokoje
    { room_number: '101', room_type_name: 'Dvoul≈Ø≈ækov√Ω pokoj', floor: 1 },
    { room_number: '102', room_type_name: 'Dvoul≈Ø≈ækov√Ω pokoj', floor: 1 },
    { room_number: '103', room_type_name: 'Dvoul≈Ø≈ækov√Ω pokoj se dvƒõma l≈Ø≈æky', floor: 1 },
    { room_number: '104', room_type_name: 'Dvoul≈Ø≈ækov√Ω pokoj se dvƒõma l≈Ø≈æky', floor: 1 },
    // Standardn√≠ pokoje
    { room_number: '201', room_type_name: 'Standardn√≠ dvoul≈Ø≈ækov√Ω pokoj', floor: 2 },
    { room_number: '202', room_type_name: 'Standardn√≠ dvoul≈Ø≈ækov√Ω pokoj', floor: 2 },
    { room_number: '203', room_type_name: 'Standardn√≠ dvoul≈Ø≈ækov√Ω pokoj', floor: 2 },
    { room_number: '204', room_type_name: 'Standardn√≠ dvoul≈Ø≈ækov√Ω pokoj', floor: 2 },
    // Deluxe Suite
    { room_number: '301', room_type_name: 'Deluxe Suite', floor: 3 },
    { room_number: '302', room_type_name: 'Deluxe Suite', floor: 3 },
  ]

  for (const room of rooms) {
    // First get the room type ID
    const { data: roomType } = await supabase
      .from('room_types')
      .select('id')
      .eq('name', room.room_type_name)
      .single()

    if (roomType) {
      const { error: roomError } = await supabase
        .from('rooms')
        .upsert({
          room_number: room.room_number,
          room_type_id: roomType.id,
          floor: room.floor,
          status: 'available',
          is_clean: true
        }, { onConflict: 'room_number' })
      
      if (roomError) {
        console.error(`‚ùå Error creating room ${room.room_number}:`, roomError)
      } else {
        console.log(`‚úÖ Room ${room.room_number} created`)
      }
    }
  }

  // Seed additional services
  const services = [
    {
      name: 'Sn√≠danƒõ',
      description: 'Bohat√° sn√≠danƒõ formou bufetu - d≈æusy, ƒçerstv√© peƒçivo a s√Ωry',
      price: 200,
      currency: 'CZK'
    },
    {
      name: 'Dƒõtsk√° post√Ωlka',
      description: 'Post√Ωlka pro dƒõti 0-3 roky',
      price: 250,
      currency: 'CZK',
      age_restriction: '0-3 roky'
    },
    {
      name: 'P≈Øjƒçen√≠ kola',
      description: 'P≈Øjƒçen√≠ kola na cel√Ω den vƒçetnƒõ helmy a z√°mku',
      price: 300,
      currency: 'CZK'
    },
    {
      name: 'Parkov√°n√≠',
      description: 'Bezpeƒçn√© parkov√°n√≠ v uzav≈ôen√©m dvo≈ôe',
      price: 0,
      currency: 'CZK'
    }
  ]

  for (const service of services) {
    const { error: serviceError } = await supabase
      .from('additional_services')
      .upsert(service, { onConflict: 'name' })
    
    if (serviceError) {
      console.error(`‚ùå Error creating service ${service.name}:`, serviceError)
    } else {
      console.log(`‚úÖ Service ${service.name} created`)
    }
  }

  // Seed nearby attractions
  const attractions = [
    {
      name: 'Znojemsk√Ω hrad',
      category: 'Historick√° pam√°tka',
      distance_km: 0.5,
      description: 'Historick√Ω hrad s n√°dhern√Ωm v√Ωhledem na mƒõsto'
    },
    {
      name: 'Znojemsk√© podzem√≠',
      category: 'Turistick√° atrakce',
      distance_km: 0.3,
      description: 'Rozs√°hl√Ω syst√©m st≈ôedovƒõk√Ωch podzemn√≠ch chodeb'
    },
    {
      name: 'Vyhl√≠dkov√° radniƒçn√≠ vƒõ≈æ',
      category: 'Vyhl√≠dka',
      distance_km: 0.2,
      description: 'V√Ωhled na historick√© centrum mƒõsta'
    },
    {
      name: 'Rotunda Panny Marie a sv. Kate≈ôiny',
      category: 'Historick√° pam√°tka',
      distance_km: 0.4,
      description: 'Rom√°nsk√° rotunda z 11. stolet√≠'
    },
    {
      name: 'Kostel sv. Michala',
      category: 'Historick√° pam√°tka',
      distance_km: 0.05,
      description: 'Historick√Ω kostel p≈ô√≠mo u penzionu'
    },
    {
      name: 'N√°rodn√≠ park Podyj√≠',
      category: 'P≈ô√≠roda',
      distance_km: 0.4,
      description: 'Kr√°sn√° p≈ô√≠roda, ide√°ln√≠ pro pƒõ≈°√≠ turistiku a cyklistiku'
    },
    {
      name: 'Z√°mek Vranov nad Dyj√≠',
      category: 'Historick√° pam√°tka',
      distance_km: 21,
      description: 'Barokn√≠ z√°mek na sk√°le nad ≈ôekou Dyj√≠'
    },
    {
      name: 'Hrad B√≠tov',
      category: 'Historick√° pam√°tka',
      distance_km: 32,
      description: 'Jeden z nejstar≈°√≠ch a nejzachovalej≈°√≠ch hrad≈Ø v ƒåR'
    }
  ]

  for (const attraction of attractions) {
    const { error: attrError } = await supabase
      .from('nearby_attractions')
      .upsert(attraction, { onConflict: 'name' })
    
    if (attrError) {
      console.error(`‚ùå Error creating attraction ${attraction.name}:`, attrError)
    } else {
      console.log(`‚úÖ Attraction ${attraction.name} created`)
    }
  }

  console.log('üéâ Pension information seeding completed!')
}

// Run the seed
seedPensionInfo().catch(console.error)
