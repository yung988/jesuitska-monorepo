'use client'

import { useState, useEffect } from 'react'
import { format } from 'date-fns'
import { cs } from 'date-fns/locale'
import { Calendar } from "@/components/ui/calendar"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { useToast } from "@/hooks/use-toast"
import { CalendarIcon, MapPin, Phone, Users, Star, Wifi, Car, Coffee } from "lucide-react"
import { cn } from "@/lib/utils"

interface RoomType {
  id: string
  name: string
  description: string
  capacity: number
  price_per_night: number
  amenities: string[]
  available?: boolean
  availableRooms?: number
}

export default function BookingSection() {
  const [checkIn, setCheckIn] = useState<Date>()
  const [checkOut, setCheckOut] = useState<Date>()
  const [guests, setGuests] = useState<string>('2')
  const [adults, setAdults] = useState<number>(2)
  const [children, setChildren] = useState<number>(0)
  const [showResults, setShowResults] = useState(false)
  const [availableRooms, setAvailableRooms] = useState<RoomType[]>([])
  const [selectedRoom, setSelectedRoom] = useState<RoomType | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const { toast } = useToast()

  // Formulářová data pro rezervaci
  const [bookingData, setBookingData] = useState({
    name: '',
    email: '',
    phone: '',
    message: ''
  })

  const handleSearch = async () => {
    if (checkIn && checkOut) {
      setIsLoading(true)
      setError('')
      
      try {
        const adminApiUrl = process.env.NEXT_PUBLIC_ADMIN_API_URL || 'http://localhost:3001'
        const checkInStr = format(checkIn, 'yyyy-MM-dd')
        const checkOutStr = format(checkOut, 'yyyy-MM-dd')
        
        const response = await fetch(
          `${adminApiUrl}/api/availability?checkIn=${checkInStr}&checkOut=${checkOutStr}&adults=${adults}&children=${children}`
        )
        
        if (!response.ok) {
          throw new Error('Chyba při načítání dostupnosti')
        }
        
        const data = await response.json()
        
        if (data.success && data.availability) {
          setAvailableRooms(data.availability)
          setShowResults(true)
        } else {
          setError(data.error || 'Nepodařilo se načíst dostupné pokoje')
          setAvailableRooms([])
        }
      } catch (error) {
        console.error('Error fetching availability:', error)
        setError('Nepodařilo se načíst dostupné pokoje')
        toast({
          title: "Chyba",
          description: "Nepodařilo se načíst dostupné pokoje",
          variant: "destructive"
        })
      } finally {
        setIsLoading(false)
      }
    }
  }

  const calculateTotalPrice = (room: RoomType) => {
    if (!checkIn || !checkOut) return 0
    const nights = Math.ceil((checkOut.getTime() - checkIn.getTime()) / (1000 * 60 * 60 * 24))
    return nights * room.price_per_night
  }

  const calculateNights = () => {
    if (!checkIn || !checkOut) return 0
    return Math.ceil((checkOut.getTime() - checkIn.getTime()) / (1000 * 60 * 60 * 24))
  }

  const handleBookingSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!selectedRoom || !checkIn || !checkOut) return

    setIsLoading(true)
    setError('')

    try {
      const [firstName, ...lastName] = bookingData.name.split(' ')
      const adminApiUrl = process.env.NEXT_PUBLIC_ADMIN_API_URL || 'http://localhost:3001'
      
      const reservationData = {
        guestInfo: {
          firstName,
          lastName: lastName.join(' ') || firstName,
          email: bookingData.email,
          phone: bookingData.phone
        },
        roomTypeId: selectedRoom.id,
        checkInDate: format(checkIn, 'yyyy-MM-dd'),
        checkOutDate: format(checkOut, 'yyyy-MM-dd'),
        adults: adults,
        children: children,
        specialRequests: bookingData.message,
        breakfastIncluded: false
      }

      const response = await fetch(`${adminApiUrl}/api/bookings`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(reservationData)
      })

      const data = await response.json()

      if (response.ok && data.success) {
        toast({
          title: "Rezervace úspěšně vytvořena!",
          description: `Číslo faktury: ${data.invoiceNumber}`,
        })
        
        // Reset formuláře
        setSelectedRoom(null)
        setBookingData({
          name: '',
          email: '',
          phone: '',
          message: ''
        })
        setShowResults(false)
        setCheckIn(undefined)
        setCheckOut(undefined)
      } else {
        throw new Error(data.error || 'Nepodařilo se vytvořit rezervaci')
      }
    } catch (error) {
      console.error('Booking error:', error)
      setError(error instanceof Error ? error.message : 'Nepodařilo se vytvořit rezervaci')
      toast({
        title: "Chyba",
        description: error instanceof Error ? error.message : 'Nepodařilo se vytvořit rezervaci',
        variant: "destructive"
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <section id="booking" className="py-24 md:py-32 px-6 md:px-20 bg-gray-50">
      <div className="max-w-7xl mx-auto">
        <h2 className="text-3xl md:text-4xl lg:text-5xl font-serif tracking-wider uppercase text-center mb-4">
          Rezervace
        </h2>
        <div className="w-24 h-px bg-dark-gray/30 mx-auto mb-12" />

        {/* Vyhledávací formulář */}
        <Card className="max-w-5xl mx-auto shadow-xl mb-12">
          <CardHeader className="text-center">
            <CardTitle className="text-2xl">Zkontrolovat dostupnost</CardTitle>
            <CardDescription>Vyberte termín vašeho pobytu</CardDescription>
          </CardHeader>
          <CardContent className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              {/* Check-in Date */}
              <div className="space-y-2">
                <Label htmlFor="check-in">Příjezd</Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      id="check-in"
                      variant="outline"
                      className={cn(
                        "w-full justify-start text-left font-normal",
                        !checkIn && "text-muted-foreground"
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {checkIn ? format(checkIn, 'dd. MM. yyyy', { locale: cs }) : "Vyberte datum"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                      mode="single"
                      selected={checkIn}
                      onSelect={setCheckIn}
                      disabled={(date) =>
                        date < new Date() || (checkOut ? date >= checkOut : false)
                      }
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              </div>

              {/* Check-out Date */}
              <div className="space-y-2">
                <Label htmlFor="check-out">Odjezd</Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      id="check-out"
                      variant="outline"
                      className={cn(
                        "w-full justify-start text-left font-normal",
                        !checkOut && "text-muted-foreground"
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {checkOut ? format(checkOut, 'dd. MM. yyyy', { locale: cs }) : "Vyberte datum"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                      mode="single"
                      selected={checkOut}
                      onSelect={setCheckOut}
                      disabled={(date) =>
                        date < new Date() || (checkIn ? date <= checkIn : false)
                      }
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              </div>

              {/* Number of Adults */}
              <div className="space-y-2">
                <Label htmlFor="adults">Dospělí</Label>
                <Select 
                  value={adults.toString()} 
                  onValueChange={(value) => {
                    setAdults(parseInt(value))
                    setGuests(value)
                  }}
                >
                  <SelectTrigger id="adults">
                    <div className="flex items-center">
                      <Users className="mr-2 h-4 w-4" />
                      <SelectValue />
                    </div>
                  </SelectTrigger>
                  <SelectContent>
                    {[1, 2, 3, 4, 5, 6].map((num) => (
                      <SelectItem key={num} value={num.toString()}>
                        {num}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Number of Children */}
              <div className="space-y-2">
                <Label htmlFor="children">Děti</Label>
                <Select 
                  value={children.toString()} 
                  onValueChange={(value) => setChildren(parseInt(value))}
                >
                  <SelectTrigger id="children">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {[0, 1, 2, 3, 4].map((num) => (
                      <SelectItem key={num} value={num.toString()}>
                        {num}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Search Button */}
              <div className="flex items-end">
                <Button 
                  onClick={handleSearch}
                  disabled={!checkIn || !checkOut || isLoading}
                  className="w-full"
                  size="lg"
                >
                  {isLoading ? 'Hledám...' : 'Vyhledat pokoje'}
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Výsledky vyhledávání */}
        {showResults && (
          <div className="max-w-5xl mx-auto">
            <h3 className="text-2xl font-serif mb-6">Dostupné pokoje</h3>
            
            {error && (
              <div className="bg-red-50 text-red-800 p-4 rounded-lg mb-4">
                {error}
              </div>
            )}
            
            {availableRooms.length === 0 ? (
              <Card className="p-6">
                <p className="text-center text-gray-600">
                  Pro vybraný termín nejsou dostupné žádné pokoje.
                </p>
              </Card>
            ) : (
              <div className="space-y-4">
                {availableRooms.map((room) => (
                  <Card key={room.id} className="overflow-hidden">
                    <div className="grid md:grid-cols-4 gap-6 p-6">
                      <div className="relative h-48 md:h-full rounded-lg overflow-hidden bg-gray-200">
                        {/* TODO: Přidat obrázky pokojů */}
                        <div className="flex items-center justify-center h-full text-gray-400">
                          <Users className="h-12 w-12" />
                        </div>
                      </div>
                      
                      <div className="md:col-span-2 space-y-4">
                        <div>
                          <div className="flex items-center justify-between mb-2">
                            <h4 className="text-xl font-semibold">{room.name}</h4>
                            <Badge variant="default">
                              {room.availableRooms} dostupných
                            </Badge>
                          </div>
                          <p className="text-gray-600">{room.description}</p>
                        </div>
                        
                        <div className="flex items-center gap-4 text-sm text-gray-600">
                          <div className="flex items-center gap-1">
                            <Users className="h-4 w-4" />
                            <span>Max. {room.capacity} {room.capacity === 1 ? 'osoba' : room.capacity < 5 ? 'osoby' : 'osob'}</span>
                          </div>
                        </div>
                        
                        <div className="flex flex-wrap gap-2">
                          {room.amenities && room.amenities.slice(0, 3).map((amenity) => (
                            <Badge key={amenity} variant="outline" className="text-xs">
                              {amenity}
                            </Badge>
                          ))}
                          {room.amenities && room.amenities.length > 3 && (
                            <Badge variant="outline" className="text-xs">
                              +{room.amenities.length - 3} další
                            </Badge>
                          )}
                        </div>
                      </div>
                      
                      <div className="flex flex-col justify-between items-end">
                        <div className="text-right">
                          <p className="text-2xl font-bold">{room.price_per_night.toLocaleString('cs-CZ')} Kč</p>
                          <p className="text-sm text-gray-600">za noc</p>
                          {checkIn && checkOut && (
                            <>
                              <Separator className="my-2" />
                              <p className="text-lg font-semibold">
                                Celkem: {calculateTotalPrice(room).toLocaleString('cs-CZ')} Kč
                              </p>
                              <p className="text-xs text-gray-600">
                                za {calculateNights()} {calculateNights() === 1 ? 'noc' : calculateNights() < 5 ? 'noci' : 'nocí'}
                              </p>
                            </>
                          )}
                        </div>
                        
                        <Button 
                          onClick={() => setSelectedRoom(room)}
                          className="mt-4"
                        >
                          Rezervovat
                        </Button>
                      </div>
                    </div>
                  </Card>
                ))}
            </div>
          </div>
        )}

        {/* Rezervační formulář */}
        {selectedRoom && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
              <div className="sticky top-0 bg-white border-b p-6">
                <div className="flex justify-between items-center">
                  <h3 className="text-2xl font-serif">Dokončit rezervaci</h3>
                  <button
                    onClick={() => setSelectedRoom(null)}
                    className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                  >
                    <X className="h-5 w-5" />
                  </button>
                </div>
              </div>
              
              <form onSubmit={handleBookingSubmit} className="p-6 space-y-6">
                {/* Souhrn rezervace */}
                <Card>
                  <CardHeader>
                    <CardTitle>Souhrn rezervace</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <div className="flex justify-between">
                      <span>Pokoj:</span>
                      <span className="font-semibold">{selectedRoom.name}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Příjezd:</span>
                      <span>{checkIn && format(checkIn, 'dd. MM. yyyy', { locale: cs })}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Odjezd:</span>
                      <span>{checkOut && format(checkOut, 'dd. MM. yyyy', { locale: cs })}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Počet nocí:</span>
                      <span>{calculateNights()}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Počet hostů:</span>
                      <span>{guests}</span>
                    </div>
                    <Separator className="my-4" />
                    <div className="flex justify-between text-lg font-semibold">
                      <span>Celková cena:</span>
                      <span>{calculateTotalPrice(selectedRoom).toLocaleString('cs-CZ')} Kč</span>
                    </div>
                  </CardContent>
                </Card>

                {/* Kontaktní údaje */}
                <div className="space-y-4">
                  <h4 className="text-lg font-semibold">Kontaktní údaje</h4>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="name">Jméno a příjmení *</Label>
                      <Input
                        id="name"
                        value={bookingData.name}
                        onChange={(e) => setBookingData({ ...bookingData, name: e.target.value })}
                        required
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="email">Email *</Label>
                      <Input
                        id="email"
                        type="email"
                        value={bookingData.email}
                        onChange={(e) => setBookingData({ ...bookingData, email: e.target.value })}
                        required
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="phone">Telefon *</Label>
                      <Input
                        id="phone"
                        type="tel"
                        value={bookingData.phone}
                        onChange={(e) => setBookingData({ ...bookingData, phone: e.target.value })}
                        required
                      />
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="message">Poznámka (nepovinné)</Label>
                    <Textarea
                      id="message"
                      rows={3}
                      value={bookingData.message}
                      onChange={(e) => setBookingData({ ...bookingData, message: e.target.value })}
                    />
                  </div>
                </div>

                {/* Tlačítka */}
                <div className="flex gap-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setSelectedRoom(null)}
                    className="flex-1"
                  >
                    Zrušit
                  </Button>
                  <Button
                    type="submit"
                    disabled={isLoading}
                    className="flex-1"
                  >
                    {isLoading ? 'Odesílám...' : 'Potvrdit rezervaci'}
                  </Button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </section>
  )
}
